include ../../../header

html
    head
        meta(property='og:title'       content='INDUCTIVE')
        meta(property='og:description' content='Inductive Space')
        meta(property='og:url'         content='https://anders.groupoid.space/foundations/mltt/inductive/')

block title
    title INDUCTIVE

block content
    nav
        <a href='../../../index.html'>ANDERS</a>
        <a href='../../../lib/index.html'>LIB</a>
        <a href='#'>INDUCTIVE</a>
    article.main.list
        section
            h1 INDUCTIVE SPACES
            aside
                time Published: 7 OCT 2017
            +tex.
                $𝟎,$ $𝟏,$ $𝟐$ form the inductive base for well-founded
                spaces $\mathrm{W}$ of MLTT-80 that allow to manipulate F-algebras.
                For coinductive streams (G-coalgebras) one may need $\mathrm{M}$
                spaces with reversed intro-elim rules.

            +code.
                def B: U := W (x: + ℕ ℕ), +-rec ℕ ℕ (λ (f: + ℕ ℕ), U) 𝟎 𝟏×𝟏 x
                def L (A: U): U :=    W (x: M A), M-rec A U 𝟎 (λ (a: A), 𝟏) x
                def N: U :=           W (x: 𝟐), ind₂ (λ (f: 𝟐), U) 𝟎 𝟏 x
                def M (A: U): U :=    Σ (x: 𝟐), ind₂ (λ (f: 𝟐), U) 𝟏 A x
                def + (A B: U): U :=  Σ (x: 𝟐), ind₂ (λ (f: 𝟐), U) A B x
                def V (A: U₁):    ℕ → U := ℕ-iter U 𝟏 (λ (X: U), A × X)
                def F:            ℕ → U := ℕ-iter U 𝟎 (+ 𝟏)
            br.
            +tex.
                For multiple
                occurance of fixpoint variable in W-fiber encoded
                argument use $×$ cartesian product, like for binary trees 𝟏 × 𝟏.
                Here is example for List MLTT encoding:
            +code.
                def List (A: U)
                  : Π (w : M A), U
                 := λ (w : M A),
                            ind₂ (λ (x: 𝟐),
                      Π (u: ind₂ (λ (x: 𝟐), U) 𝟏 A x), U)
                           (ind₁ (λ (x: 𝟏), U) 𝟎)
                                 (λ (a: A), 𝟏) w.1 w.2
            br.

            h1 W
            +tex.
                Well-founded trees without mutual recursion represented as $\mathrm{W}$-types.

            h2 Formation

            +tex.
                $\mathbf{Definition\ 4.1}$ ($\mathrm{W}$-Formation). For $A : \mathcal{U}$ and $B : A \rightarrow \mathcal{U}$, type $\mathrm{W}$
                is defined as $\mathrm{W}(A,B) : \mathcal{U}$ or
            code.
                def W' (A : U) (B : A → U) : U := W (x : A), B x
            +tex(true).
                $$
                    \mathrm{W}_{(x : A)} B(x) : \mathcal{U}.
                $$

            h2 Introduction

            +tex.
                $\mathbf{Definition\ 4.2}$ ($\mathrm{W}$-Introduction). Elements of $\mathrm{W}_{(x : A)} B(x)$ are called
                well-founded trees and created with single $\mathrm{sup}$ constructor:

            code.
                def sup' (A: U) (B: A → U) (x: A) (f: B x → W' A B)
                  : W' A B
                 := sup A B x f

            +tex(true).
                $$
                    \mathrm{sup} : \mathrm{W}_{(x: A)} B(x).
                $$

            h2 Elimination

            +tex.
                $\mathbf{Definition\ 4.3}$ (Induction Principle $\mathrm{ind_W}$). The induction principle states that
                for any types $A: \mathcal{U}$ and $B: A \rightarrow \mathcal{U}$ and type family $C$ over $\mathrm{W}(A,B)$
                and the function $g : G$, where

            +tex(true).
                $$
                   G = \prod_{x: A}\prod_{f: B(x) → \mathrm{W}(A,B)}\prod_{b: B(x)} C(f(b)) → C(\mathrm{sup}(x,f))
                $$
            p.
                there is a dependent function:
            +tex(true).
                $$
                    \mathrm{ind_W} : \prod_{C: \mathrm{W}(A,B) → \mathcal{U}}\prod_{g:G}\prod_{a: A}\prod_{f: B(a) → \mathrm{W}(A,B)}\prod_{b: B(a)}C(f(b)).
                $$

            +code.
                def W-ind (A : U) (B : A → U)
                    (C : (W (x : A), B x) → U)
                    (g : Π (x : A) (f : B x → (W (x : A), B x)), (Π (b : B x), C (f b)) → C (sup A B x f))
                    (a : A) (f : B a → (W (x : A), B x)) (b : B a) : C (f b) := indᵂ A B C g (f b)
            br.

            h2 Computation
            +tex.
                $\mathbf{Theorem\ 4.4}$ ($\mathrm{ind_W}$ computes). The induction principle $\mathrm{ind^W}$ satisfies
                the equation:
            +tex(true).
                $$
                    \mathrm{ind_W}\mbox{-}\beta : g(a,f,λb.\mathrm{ind^W}(g,f(b))) 
                $$
            +tex(true).
                $$
                    =_{def} \mathrm{ind_W}(g,\mathrm{sup}(a,f)).
                $$
            +code.
                def indᵂ-β (A : U) (B : A → U)
                    (C : (W (x : A), B x) → U) (g : Π (x : A)
                    (f : B x → (W (x : A), B x)), (Π (b : B x), C (f b)) → C (sup A B x f))
                    (a : A) (f : B a → (W (x : A), B x))
                  : PathP (<_> C (sup A B a f))
                          (indᵂ A B C g (sup A B a f))
                          (g a f (λ (b : B a), indᵂ A B C g (f b)))
                 := <_> g a f (λ (b : B a), indᵂ A B C g (f b))
            br.
            h2 Uniqueness

            +tex.
                $\mathbf{Theorem\ 4.5}$ ($W$-Uniqueness).
            +tex(true).
                $$
                    \mathrm{ind_W}\mbox{-}\eta
                $$

            h1 EMPTY
            p.
                The Empty type represents False-type logical 𝟎, type without inhabitants, Void or ⊥ (Bottom).
                As it has not inhabitants it lacks both constructors and eliminators, however, it has induction.

            h2 Formation
            +tex.
                $\mathbf{Definition\ 4.6}$ (Empty). Empty-type is defined as built-in 𝟎-type:
            +tex(true).
                $$
                    𝟎 : \mathcal{U}.
                $$

            h2 Elimination
            +tex.
                $\mathbf{Definition\ 4.7}$ (Induction Principle $\mathrm{ind_0}$). 𝟎-type is satisfying the
                induction principle:

            +code.
                def Empty-ind (C: 𝟎 → U) (z: 𝟎) : C z := ind₀ (C z) z
            +tex(true).
                $$
                    \mathrm{ind_0} : \prod_{C\ :\ 𝟎\ \rightarrow\ \mathcal{U}} \prod_{z\ :\ 𝟎} C(z).
                $$

            +tex.
                $\mathbf{Definition\ 4.7.1}$ (Negation or isEmpty). For any type A negation of A is defined as arrow from A to 𝟎:
            +tex(true).
                $$
                    \neg A := A \rightarrow 𝟎.
                $$

            +code.
                def isEmpty (A: U): U := A → 𝟎

            +tex.
                The witness of $\neg A$ is obtained by assuming A and deriving a contradiction.
                This techniques is called proof of negation and is applicable to any types in constrast
                to proof by contradiction which implies $\neg\neg A \rightarrow A$ (double negation elimination) and is
                applicable only to decidable types with $\neg A + A$ property.
            br

            h1 UNIT

            p.
                Unit type is the simplest type equipped with full set of MLTT inference rules.
                It contains single inhabitant ★ (star).

            h2 Formation

            +tex.
                $\mathbf{Definition\ 4.8}$ (Unit). Unit-type is defined as built-in 𝟏-type:
            +tex(true).
                $$
                    𝟏 : \mathcal{U}.
                $$

            h2 Introduction

            +tex.
                $\mathbf{Definition\ 4.9}$ (Star). 𝟏-type containts single inhabitant ★:
            +tex(true).
                $$
                    ★ : 𝟏.
                $$

            h2 Elimination

            +tex.
                $\mathbf{Definition\ 4.10}$. (Induction Principle $\mathrm{ind_1}$). 𝟏-type satisfies
                induction principle that for any family $C$ indexed by $x : 1$ there is a function
            +code.
                def 1-ind (C: 𝟏 → U) (x: C ★) (z: 𝟏) : C z := ind₁ C x z
            +tex(true).
                $$
                   \mathrm{ind_1} : \prod_{C\ :\ 𝟏\ \rightarrow\ \mathcal{U}} \prod_{x\ :\ C(★)} \prod_{z\ :\ 𝟏} C(z).
                $$

            h2 Computation
            +tex.
                $\mathbf{Theorem\ 4.11}$ (Unit Computes). The following equation holds:
            +tex(true).
                $$
                   \mathrm{ind_1}(x,★) = x.
                $$
            h2 Uniqueness
            +tex.
                $\mathbf{Theorem\ 4.12}$ (Unit Unique).

            h1 BOOL

            +tex.
                𝟐 is a logical boolean type or 0-sphere which has two
                inhabitants false (or $0_2$) and true (or $1_2$).

            h2 Formation

            +tex.
                $\mathbf{Definition\ 4.13}$ (Bool). Boolean-type or 0-sphere is defined as built-in 𝟐-type:
            +tex(true).
                $$
                    𝟐 : \mathcal{U}.
                $$

            h2 Introduction

            +tex.
                $\mathbf{Definition\ 4.14}$ (Bool Constructors $0_2$ and $1_2$).
                $\mathbf{false}$ or $0_2$ and $\mathbf{true}$ or $1_2$.
            +tex(true).
                $$
                    0_𝟐 : 𝟐.
                    1_𝟐 : 𝟐.
                $$

            h2 Elimination

            +tex.
                $\mathbf{Definition\ 4.15}$ (Induction Principle $\mathrm{ind_2}$).
            +code.
                def 2-ind (C: 𝟐 → U) (x: C 0₂) (y: C 1₂) (z: 𝟐) : C z := ind₂ C x y z
            +tex(true).
                $$
                   \mathrm{ind_2} : \prod_{C\ :\ 𝟐\ \rightarrow\ U} \prod_{x\ :\ C(0_2)} \prod_{y\ :\ C(0_1)} \prod_{z\ :\ 𝟐} C(z).
                $$
            br


include ../../../footer