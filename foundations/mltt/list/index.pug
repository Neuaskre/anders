include ../../../header

html
    head
        meta(property='og:title'       content='LIST')
        meta(property='og:description' content='List')
        meta(property='og:url'         content='https://anders.groupoid.space/foundations/mltt/list/')

block title
    title LIST

block content
    nav
        <a href='https://anders.groupoid.space/'>ANDERS</a>
        <a href='https://anders.groupoid.space/lib/'>LIB</a>
        <a href='#'>LIST</a>
    article.main.list
        section
            h1 LIST
            aside
                time Published: 4 NOV 2017
            +tex.
                The data type of $list$ over a given set $A$ can
                be represented as the initial algebra $(\mu\ L_A, in)$
                of the functor $L_A(X) = 1 + (A \times X)$.
                Denote $\mu L_A = List(A)$. The constructor
                functions
                $nil: 1 \rightarrow List(A)$ and
                $cons: A \times List(A) \rightarrow List(A)$
                are defined by
                $nil = in \cdot inl$ and
                $cons = in \cdot inr$, so
                $in = [nil,cons]$.
            +tex.
                In type theory $List$ type could be expressed as
                $$
                   List(A) := W_{(x:1+A)},\ rec_{1+A}(A,U,0,λa.𝟏,x).
                $$
            code.
                def List-ctor (A: U) := maybe-rec A U 𝟎 (λ (a : A), 𝟏)
                def List (A: U) := W (x : Maybe A), List-ctor A x

            h2 Constructors
            +tex.
                You can create zero list with $nil$ and append an element
                to the head of the list with $cons$.
            code.
                def nil (A: U) : List A
                def cons (A: U) (x : A) (xs: List A) : List A

            h2 Induction Principle
            +tex.
               Induction principle allows you to prove general predicate on $List (C\ n)$
               from predicates on constructors $(C\ nil)$ and $(C\ cons)$.
            code.
                def List-ind (A: U) (C: List A -> U)
                    (z: C (nil A)) (s: Π (x: A) (xs: List A), C xs -> C (cons A x xs))
                  : Π (n: List A), C n

            h2 Eliminators
            code.
                def List-rec  (A: U) (C : U) (z : C) (s : A → List A → C → C) : List A → C
                def List-iter (A: U) (C : U) (z : C) (s : A → C → C) : List A → C
                def List-case (A: U) (C : U) (z : C) (s : A → C) : List A → C

include ../../../footer