include ../../../header

html
    head
        meta(property='og:title'       content='ID')
        meta(property='og:description' content='Identity Spaces')
        meta(property='og:url'         content='https://anders.groupoid.space/foundations/mltt/id/')

block title
    title ID

block content
    nav
        <a href='../../../index.html'>ANDERS</a>
        <a href='../../../lib/index.html'>LIB</a>
        <a href='#'>ID</a>
    article.main.list
        section
            h1 IDENTITY SPACES
            aside
                time Published: 16 OCT 2017
            +tex.
                $=$-type is an inductive family that contains evidence
                of equality of two elements from that family. 

            h2 Formation
            +tex.
                $\mathbf{Definition\ 3.1}$ ($=$-Formation, Family). The inductive family
                $Id_V: A \rightarrow A \rightarrow V$ with domains and codomain in universe $V$
                represents inhabitants carrying proofs that given indexed
                elements $x,y:A$ are equal.
            +tex(true).
                $$
                    =\hspace{0.4em} : U =_{def} \prod_{A:V}\prod_{x,y:A} \mathbf{Id}_V(A,x,y).
                $$
            +code.
                def IdV (A: V) (x y: A)
                  : V := Id A x y

            h2 Introduction

            +tex.
                $\mathbf{Definition\ 3.2}$ ($=$-Intro, Reflection). The inductive family elements
                are instantiated by single constructor that carries proof that $x:A$ element are equals to itself.
            +tex(true).
                $$
                    \mathbf{ref}_V : x =_A x =_{def} \prod_{A:V}\prod_{x:A} \mathbf{ref}_A(x)
                $$
            +code.
                def Id-ref (A : V) (a: A)
                  : Id A a a := ref a

            h2 Elimination

            +tex.
                $\mathbf{Definition\ 3.3}$ ($=$-Elimination, J). Given a family
                $C$ and a function $c$ there is a function $f$
                such that $f(x,x,\mathbf{ref}_V(A,x)) = c(x)$.
            +tex(true).
               $$
                   \mathbf{ind}_{=_A} : (p: x =_A y) \rightarrow C(x,y,p) =_{def}
               $$
            +tex(true).
               $$
                   \prod_{A:V}\prod_{C:\Pi_{x,y:A}x=y\rightarrow V}\prod_{c: C(x,x,\mathbf{ref}(x))}
               $$
            +tex(true).
               $$
                   \lambda p.\mathbf{J}(A,C,x,c,y,p).
               $$
            +code.
                def =-ind (A : V)
                    (C : Π (x y : A), Id A x y -> V)
                    (x y : A) (c : C x x (ref x))
                    (p : Id A x y)
                  : C x y p
                := indJ A C x c y p
            br.

            h2 Computation

            +tex.
                $\mathbf{Definition\ 3.4}$ ($=$-Computation).
            +code.
                def Jˢ-β (A : V)
                    (C : Π (a b : A), Id A a b -> V)
                    (a : A) (c : C a a (ref a))
                  : Id (C a a (ref a)) (Jˢ A C a a c (ref a)) c
                 := ref c
            br.

            h2 Uniqueness

            +tex.
                $\mathbf{Definition\ 3.5}$ ($=$-Uniqueness).
            +code.
                def UIP (A : V) (a b : A) (p q : Id A a b)
                  : Id (Id A a b) p q
                 := ref p
            br.

            h1 THEOREMS

            +tex.
                $\mathbf{Definition}$ (Identity System). An identity system
                over type $A$ in universe $X_i$ is a family $R : A \rightarrow A \rightarrow X_i$
                with a function $r_0: \Pi_{a:A}R(a,a)$ such that any type family
                $D : \Pi_{a,b:A}R(a,b) \rightarrow X_i$ and $d: \Pi_{a:A}D(a,a,r_0(a))$,
                there exists a function $f: \Pi_{a,b:A}\Pi_{r:R(a,b)}D(a,b,r)$ such that
                $f(a,a,r_0(a))=d(a)$ for all $a:A$.
            +tex.
                There are number of equality signs used in this tutorial,
                all of them listed in the following table of identity systems:
            +tex(true).
                $$
                   \begin{array}{ll} \mathrm{Sign} & \mathrm{Meaning} \\
                         \hline
                        =_{def} & \mathrm{Definition} \\
                              = & \mathrm{Id} \\
                         \equiv & \mathrm{Path} \\
                         \simeq & \mathrm{Equivalence} \\
                          \cong & \mathrm{Isomorphism} \\
                           \sim & \mathrm{Homotopy} \\
                        \approx & \mathrm{Bisimulation} \\
                      \end{array}
                    $$
            +tex.
                $\mathbf{Definition}$ (Fundamental Theorem of Identity System).
            +tex.
                $\mathbf{Definition}$ (Strict Identity System). An identity system
                over type $A$ and universe of pretypes $V_i$ is called strict identity
                system ($=$), which respects UIP.
            +tex.
                $\mathbf{Definition}$ (Homotopy Identity System). An identity system
                over type $A$ and universe of homotopy types $U_i$ is called homotopy identity
                system ($\equiv$), which models discrete infinity groupoid.

include ../../../footer

