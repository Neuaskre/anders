include ../../../header

html
    head
        meta(property='og:title'       content='EQUIV')
        meta(property='og:description' content='Fibrational Equivalence')
        meta(property='og:url'         content='https://anders.groupoid.space/foundations/mltt/equiv/')

block title
    title EQUIV

block content
    nav
        <a href='../../../index.html'>ANDERS</a>
        <a href='../../../lib/index.html'>LIB</a>
        <a href='#'>EQUIV</a>
    article.main.list
        section
            h1 EQUIVALENCE
            aside
                time Published: 30 DEC 2018
            h2 Formation
            +tex.
                $\mathbf{Definition\ 8.1}$ (Fiberwise Equivalence).
                Fiberwise equivalence $\simeq$ or $\mathrm{Equiv}$
                of function $f: A \rightarrow B$
                represents internal equality of types $A$ and $B$
                in the universe $U$ as contractible fibers of $f$
                over base $B$.
            +tex(true).
                $$
                    A\simeq B : U\hspace{.4em}=_{def}\mathbf{Equiv}(A,B) : U =_{def}
                $$
            +tex(true).
                $$
                        \sum_{f: A \rightarrow B}
                        \prod_{y:B}
                        \sum_{x: \Sigma_{x:A} y =_B f(x)}
                        \sum_{w: \Sigma_{x:A} y =_B f(x)}
                $$
            +tex(true).
                $$
                        x =_{\Sigma_{x:A} y =_B f(x)} w.
                $$
            +code.
                def isContr (A: U) : U
                 := Σ (x: A), Π (y: A), Path A x y

                def fiber (A B : U) (f: A → B) (y : B): U
                 := Σ (x : A), Path B y (f x)

                def isEquiv (A B : U) (f : A → B) : U
                 := Π (y : B), isContr (fiber A B f y)

                def equiv (A B : U) : U
                 := Σ (f : A → B), isEquiv A B f
            br.
            h2 Introduction
            +tex.
                $\mathbf{Definition\ 8.2}$ (Fiberwise Reflection).
                There is a fiberwise instance $\mathrm{id_\simeq}$
                of $A\simeq A$ that is derived
                as $(\mathrm{id}(A),\mathrm{isContrSingl}(A))$:
            +tex(true).
                $$
                    \mathrm{id}_\simeq : \mathbf{Equiv}(A,A).
                $$
            +code.
                def singl (A: U) (a: A): U
                 := Σ (x: A), Path A a x

                def contr (A : U) (a b : A) (p : Path A a b)
                  : Path (singl A a) (eta A a) (b, p)
                 := &lt;i> (p @ i, &lt;j> p @ i /\ j)

                def isContrSingl (A : U) (a : A)
                  : isContr (singl A a)
                 := ((a,idp A a),
                     (\(z:singl A a),contr A a z.1 z.2))

                def idEquiv (A : U)
                  : equiv A A
                 := (\(a:A) -> a, isContrSingl A)
            br.
            h2 Elimination
            +tex.
                $\mathbf{Definition\ 8.3}$ (Fiberwise Induction Principle).
                For any $P : A \rightarrow B \rightarrow A \simeq B \rightarrow U$
                and it's evidence $d$ at $(B,B,\mathrm{id_\simeq}(B))$
                there is a function $\mathbf{ind}_\simeq$. HoTT 5.8.5
            +tex(true).
                $$
                  \mathbf{ind}_\simeq(P,d) : (p: A\simeq B) \rightarrow P(A,B,p).
                $$
            +code.
                def J-equiv (A B: U)
                    (P: Π (A B: U), equiv A B → U)
                    (d: P B B (idEquiv B))
                  : Π (e: equiv A B), P A B e
                 := λ (e: equiv A B),
                      subst (single B) (\ (z: single B), P z.1 B z.2)
                            (B,idEquiv B) (A,e)
                            (contrSinglEquiv A B e) d
            br.
            h2 Computation
            +tex.
                $\mathbf{Definition\ 8.4}$ (Fiberwise Computation of Induction Principle).
            +code.
                def compute-Equiv (A : U)
                    (C : Π (A B: U), equiv A B → U)
                    (d: C A A (idEquiv A))
                  : Path (C A A (idEquiv A)) d
                         (ind-Equiv A A C d (idEquiv A))
            br.

        section
            h1 UNIVALENCE
            +tex.
                The notion of univalence represents
                transport between fibrational equivalence
                as contractability of fibers and homotopical
                multi-dimentional
                heterogeneous path equality (HoTT 2.10):
            +tex(true).
                $$
                   \mathrm{Univalence} =_{def}
                $$
            +tex(true).
                $$
                   \mathbf{isEquiv}(A\simeq B,A = B, \mathbf{ua}).
                $$
            +tex.
                The $\mathrm{isEquiv(f: Equiv \rightarrow Path)}$ type
                is called $\mathrm{Univ}$ type. Univalence is packed
                as isomorphism where intro is obtained by $\mathrm{Glue}$ type
                and elim $g: \mathrm{Path} \rightarrow \mathrm{Equiv}$
                is obtained by $\Sigma$ transport from constant map.
            h2 Formation
            +tex.
                $\mathbf{Definition\ 8.5}$ (Univalence Formation).
            +tex(true).
                $$
                    (A \simeq B) \rightarrow (A =_U B) : U.
                $$
            +code.
                def univ-formation (A B : U)
                 := equiv A B → PathP (&lt;_> U) A B
            br.
            h2 Introduction
            +tex.
                $\mathbf{Definition\ 8.6}$ (Univalence Intro).
                Glueing $A$ onto $B$ is an operation when $\varphi\mbox{=}0$ using $e$
                and $B$ onto itself when $\varphi\mbox{=}1$ using the identity
                equivalence. The term ua(e) is a path from $A$ to $B$ as the $\mathbf{Glue}$ type
                reduces when the boundary conditions are satisfied $-$
                when $\varphi\mbox{=}0$ this reduces to $A$ and when $\varphi\mbox{=}1$ it reduces to $B$.
            +tex(true).
                $$
                    \mathbf{ua} : (A\simeq B) \rightarrow (A =_U B).
                $$
            +code.
                def univ-intro (A B : U)
                  : univ-formation A B
                 := λ (e : equiv A B),
                    &lt;i> Glue B (∂ i)
                     [ (i = 0) → (A, e),
                       (i = 1) → (B, idEquiv B) ]
            br.
            h2 Elimination
            +tex.
                $\mathbf{Definition\ 8.7}$ (Univalence Elimination).
            +tex(true).
                $$
                    \mathbf{ua}^{-1} \equiv \mathbf{transp}\ ([i] \simeq_A(p@i)\ 0\ \mathrm{idEquiv}_A.
                $$
            +code.
                def univ-elim (A B : U)
                    (p : PathP (&lt;_> U) A B)
                  : equiv A B
                 := transp (&lt;i> equiv A (p @ i))
                           0 (idEquiv A)
            br.
            h2 Computation
            +tex.
                $\mathbf{Definition\ 8.8}$ (Univalence Computation).
            +tex(true).
                $$
                    \mathbf{transp}(\mathbf{ua}(f),x) \equiv f(x).
                $$
            h2 Uniqueness
            +tex.
                $\mathbf{Definition\ 8.9}$ (Univalence Uniqueness).
            +tex(true).
                $$
                    p \equiv \mathbf{ua}(\mathbf{transp}(p)).
                $$
            +code.
                def univ-computation (A B : U)
                    (p : PathP (&lt;_> U) A B)
                  : PathP (&lt;_> PathP (&lt;_> U) A B)
                          (univ-intro A B (univ-elim A B p)) p
                 := &lt;j i> Glue B (j ∨ ∂ i)
                       [ (i = 0) → (A, univ-elim A B p),
                         (i = 1) → (B, idEquiv B),
                         (j = 1) → (p @ i, univ-elim (p @ i)
                                           B (&lt;k> p @ (i ∨ k))) ]
            br.

        section
            h1 MINIVALENCE
            p.
                The notion of Minivalence as forth-back map between
                fibrational equivalence and section/retract-based
                isomorphism is mentioned in Cubical Agda sources.

            h2 Formation
            +tex.
                $\mathbf{Definition\ 8.10}$ (Minivalence Formation).
            +code.
                def mini-Form (A B : U) : U
                 := iso A B -> equiv A B
            br.
            h2 Introduction
            +tex.
                $\mathbf{Definition\ 8.11}$ (Minivalence Introduction).
            +code.
                def mini-Intro (A B : U)
                  : mini-Form A B
                 := \ (x : iso A B),
                      univ-elim A B
                        (isoPath A B x.f x.g x.s x.t)
            br.

            h2 Elimination
            +tex.
                $\mathbf{Definition\ 8.12}$ (Minivalence Elimination).
            +code.
                def mini-Elim (A B : U)
                  : equiv A B -> iso A B
                 := \ (x : equiv A B),
                      ( x.f,
                        inv-equiv A B x,
                        ret-equiv A B x,
                        sec-equiv A B x,
                        star
                      )
            br.

include ../../../footer
