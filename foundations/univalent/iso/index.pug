include ../../../header

html
    head
        meta(property='og:title'       content='ISO')
        meta(property='og:description' content='Section-Retract Isomorphism')
        meta(property='og:url'         content='https://anders.groupoid.space/foundations/univalent/iso/')

block title
    title ISO

block content
    nav
        <a href='../../../index.html'>ANDERS</a>
        <a href='../../../lib/index.html'>LIB</a>
        <a href='#'>ISO</a>
    article.main.list
        section
            h1 ISOMORPHISM
            aside
                time Published: 26 NOV 2017
            +tex.
                Just like $\mathrm{Equiv}$ notion of $\mathrm{Iso}$ represents equality
                of types $A$ and $B$ within given universe $U$. However instead of Fibration it
                uses Section and Retract for its definition and unlike equivalence
                isomorphism predicate is not a proposition:
            +tex(true).
                $$
                    \prod_{f : A \rightarrow B}\mathrm{isProp}\ (\mathrm{isEquiv}_f),
                $$
            +tex(true).
                $$
                    \prod_{f : \Pi(x:S^1), x\equiv x} \neg \mathrm{isProp}\ (\mathrm{isIso}_f).
                $$
            +tex.
                This difference was one of the main drivers for developing
                cubical interpretation of equivalence/univalence as
                isomorphism/unimorphism is unsatisfactory candidate for basic notion
                of multidimensional inequality due to loss of propositional preservation.
            h2 Formation
            +tex.
                $\mathbf{Definition\ 9.1}$ (Isomorphism Formation).
            +tex(true).
                $$
                    A\cong B : U\hspace{.4em}=_{def}\mathbf{Iso}(A,B) : U =_{def}
                $$
            +tex(true).
                $$
                   \sum_{f:A\rightarrow B}
                   \sum_{g:B\rightarrow A}
                $$
            +tex(true).
                $$
                          \prod_{x:A}f\hspace{-0.1em}\cdot\hspace{-0.1em}g(x)\hspace{-0.3em}\equiv\hspace{-0.1em}x
                   \times \prod_{y:B}g\hspace{-0.1em}\cdot\hspace{-0.2em}f(y)\hspace{-0.1em}\equiv\hspace{-0.1em}y.
                $$
            +code.
                def iso (A B: U) : U :=
                  Œ£ (f : A -> B) (g : B -> A)
                    (s : section A B f g)
                    (t : retract A B f g), ùüè
            br.
            h2 Introduction
            +tex.
                $\mathbf{Definition\ 9.2}$ (Isomorphism Introduction).
            +tex(true).
                $$
                    \mathrm{id}_\cong : A\cong A =_{def}
                $$
            +tex(true).
                $$
                    (id(A),id(A),\lambda x.[i]x, \lambda x.[i]x).
                $$
            +code.
                def iso-intro (A: U)
                  : iso A A
                 := ( id A,
                      id A,
                      (\(x:A), <_>x),
                      (\(x:A), <_>x),
                      star
                    )
            br.
            h2 Elimination
            +tex.
                $\mathbf{Definition\ 9.3}$ (Isomorphism Induction Principle).
                For any $C : A \rightarrow B \rightarrow \mathrm{Iso}(A,B)\rightarrow U$
                and it's evidence $d$ at $(A,A,\mathrm{id_\cong})$
                there is a function:
            +tex(true).
                $$
                  \mathbf{ind}_\cong(C,d) : (p: A\cong B) \rightarrow C(A,B,p).
                $$
            +code.
                def ind-Iso (A B: U)
                    (C: Œ† (A B: U), iso A B ‚Üí U)
                    (d: C A A (iso-Intro A))
                  : Œ† (e: iso A B), P A B e
                 := Œª (e: iso A B),
                      subst (iso-single B)
                            (\ (z: iso-single B), P z.1 B z.2)
                            (B,iso-intro B)
                            (A,e)
                            (iso-contrSinglEquiv A B e) r
            br.
        section
            h1 UNIMORPHISM
            +tex.
                Similar to Fibrational Equivalence the notion of
                Retract/Section based Isomorphism could be introduced
                as forth-back transport between isomorphism and path
                equality. This notion is somehow cannonical to all
                cubical systems and is called Unimorphism or $\mathrm{isoPath}$ here.
            h2 Formation
            +tex.
                $\mathbf{Definition\ 9.4}$ (Unimorphism Formation).
            +tex(true).
                $$
                    A \cong B \rightarrow A = B : U.
                $$
            h2 Introduction
            +tex.
                $\mathbf{Definition\ 9.5}$ (Unimorphism Introduction).
            +tex(true).
                $$
                    \mathrm{isoPath} : \prod_{A,B:U}\prod_{x:\mathrm{Iso}} A = B =_{def}
                $$
            +tex(true).
                $$
                    \mathbf{Glue}_B\ \delta_i
                    \begin{cases}
                      i\mbox{=}0 \rightarrow(A,x.\hspace{-0.2em}f,\mathrm{isoToEquiv}(x)) \\
                      i\mbox{=}1 \rightarrow(B,\mathrm{id}_B,\mathrm{idIsEquiv}_B)
                    \end{cases}
                $$
            +code.
                def iso‚ÜíPath (A B : U)
                    (f : A -> B) (g : B -> A)
                    (s : Œ† (y : B), Path B (f (g y)) y)
                    (t : Œ† (x : A), Path A (g (f x)) x)
                  : PathP (&lt;_> U) A B
                 := &lt;i> Glue B (‚àÇ i)
                    [ (i = 0) -> (A,f, isoToEquiv A B f g s t),
                      (i = 1) -> (B,id B, idIsEquiv B)]
            br.
            h2 Elimination
            +tex.
                $\mathbf{Definition\ 9.6}$ (Unimorphism Elimination).
            +tex(true).
                $$
                $$
            +code.
                def uni-Elim (A B : U)
                  : PathP (&lt;_> U) A B -> iso A B
                 := Œª (p : PathP (&lt;_> U) A B),
                      ( coerce A B p,
                        coerce B A (&lt;i> p @ -i),
                        trans‚Åª¬π-trans A B p, Œª (a : A),
                        &lt;k> trans-trans‚Åª¬π A B p a @ -k,
                        ‚òÖ
                      )
            br.

include ../../../footer

