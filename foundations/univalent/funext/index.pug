include ../../../header

html
    head
        meta(property='og:title'       content='FUNEXT')
        meta(property='og:description' content='Functional Extensionality')
        meta(property='og:url'         content='https://anders.groupoid.space/foundations/univalent/funext/')

block title
    title FUNEXT

block content
    nav
        <a href='../../../index.html'>ANDERS</a>
        <a href='../../../lib/index.html'>LIB</a>
        <a href='#'>FUNEXT</a>

    article.main.list
        section
            h1 FUNCTION EXTENSIONALITY
            aside
                time Published: 19 OCT 2023
            +tex.
                Here is presented two packages of homotopy, denoted as
                $f\sim g$, between two
                functions $f,g: A \rightarrow B$ from function space.
                The first is isomorphism structure with
                $\mathbf{funext}\hspace{0.05em}\mbox{-}\mathbf{happly}$
                as encode-decode functions and $\mathbf{\beta}\hspace{0.1em}\mbox{-}\mathbf{\eta}$
                as section-retract properties of $\mathbf{Iso}(A,B)$; and the second is identity
                system structure with reflection $\mathbf{id}_\sim$
                and induction principle $\mathbf{ind}_\sim$.

            h2 Formation
            +tex.
                $\mathbf{Definition}$ (Homotopy Formation). Homotopy is
                the $\mathbf{Path}$ equality of functions $f,g: A \rightarrow B$.
            +tex(true).
                $$
                        \sim\hspace{0.3em} : U =_{def} \prod_{A,B:U} \prod_{f,g: A \rightarrow B} f \equiv g
                $$.
            +code.
                def ~ (A B: U) (f g: A -> B)
                  : U := Path (A -> B) f g
            br.

            h2 Introduction
            +tex.
                $\mathbf{Definition}$ (Homotopy Introduction, Function Extensionality).
            +code.
                def funext (A B: U) (f g: A → B)
                    (p: Π (x: A), Path B (f x) (g x))
                  : ~ A B f g
                 := &lt;i> λ (a: A), p a @ i
            br.
            +tex.
                $\mathbf{Definition}$ (Homotopy Dependent Introduction).
            +code.
                def piext (A: U) (B: A -> U) (f g: (x: A) -> B x)
                    (p: (x: A) -> Path (B x) (f x) (g x))
                  : Path ((y: A) -> B y) f g
                 := &lt;i> λ (a: A), p a @ i
            br.
            +tex.
                $\mathbf{Definition}$ (Homotopy Reflection).
            +tex(true).
                $$
                    \mathbf{id}_\sim : A \sim A =_{def} [i]\lambda x.x.
                $$
            +code.
                def funext-id (A: U)
                  : ~ A A (id A) (id A)
                 := &lt;_> id A
            br.

            h2 Elimination
            +tex.
                $\mathbf{Definition}$ (Homotopy Elimination).
            +code.
                def happly (A B: U) (f g: A -> B)
                    (p: Path (A -> B) f g) (x: A)
                  : Path B (f x) (g x)
                 := cong (A → B) B
                         (λ (h: A → B), app A B h x) f g p
            br.
            +tex.
                $\mathbf{Definition}$ (Homotopy Induction).
                For any $D : (f,g: \Pi(A,B)) \rightarrow f \sim g \rightarrow U$
                and it's evidence $d$ at $(f,f,\mathrm{id_\sim}(f(x)))$
                there is a function $\mathbf{ind}_\sim$. HoTT 5.8.5
            +tex(true).
                $$
                  \mathbf{ind}_\sim(C,d) : (h: f\sim g) \rightarrow C(f,g,h).
                $$
            +code.
                def funext-ind (A B: U) (f g: A → B) (C: funext-D A B)
                    (d: Π (f g: A → B), C f f (<_>\(x:A), f x))
                  : Π (h: Path (A → B) f g), C f g h
                 := λ (h: Path (A → B) f g),
                      subst (singl (A → B) f)
                            (\ (z: singl (A → B) f), C f (z.1) (z.2))
                            (eta (A → B) f)
                            (g, h)
                            (contr (A → B) f g h)
                            (d f g)
            br.

            h2 Computation
            +tex.
                $\mathbf{Definition}$ (Homotopy Isomorphism Computation).
            +code.
                def funext-β (A B: U) (f g: A → B)
                    (p: Π (x: A), Path B (f x) (g x))
                  : Π (x: A), Path B (f x) (g x)
                 := λ (x: A), happly A B f g (funext A B f g p) x
            br.
            +tex.
                $\mathbf{Definition}$ (Homotopy Induction Principle Computation).
            +code.
                def funext-ind-β (A B: U) (f g : A → B) (C : funext-D A B)
                    (d: Π (f g: A → B), C f f (<_>\(x:A), f x))
                  : Path (C f f (<_>f)) (d f f) (funext-ind A B f f C d (<_>f))
                 := subst-comp (singl (A → B) f)
                               (\ (z: singl (A → B) f), C f (z.1) (z.2))
                               (eta (A → B) f)
                               (d f f)
            br.

            h2 Uniqueness
            +tex.
                $\mathbf{Definition}$ (Homotopy Isomorphism Uniqueness).
            +code.
                def funext-η (A B: U) (f g: A → B)
                    (p: Path (A → B) f g)
                  : Path (Path (A → B) f g)
                         (funext A B f g (happly A B f g p)) p
                 := idp (Path (A → B) f g) p
            br.

include ../../../footer
