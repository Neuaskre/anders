{- MLTT Reality Module Check: https://groupoid.space/articles/mltt/mltt.pdf
   ‚Äî Pi;
   ‚Äî Sigma;
   ‚Äî Path.

   Copyright (c) Groupoid Infinity, 2014-2023. -}

module mltt where
import lib/foundations/mltt/pi
import lib/foundations/mltt/sigma
import lib/foundations/mltt/list
import lib/foundations/univalent/path
option girard true

def Definition : U :=
  Œ£ (name: List ‚Ñï)
    (telescope: List (Œ£(A:U),A))
    (landing: U)
    (body: U), ùüè

def IdentitySystem (A: U) : U ‚âî
  Œ£ (=-form : A ‚Üí A ‚Üí U)
    (=-ctor : Œ† (a : A), =-form a a)
    (=-elim : Œ† (a : A) (C: Œ† (x y: A) (p: =-form x y), U)
                (d: C a a (=-ctor a)) (y: A)
                (p: =-form a y), C a y p)
    (=-comp : Œ† (a : A) (C: Œ† (x y: A) (p: =-form x y), U)
                (d: C a a (=-ctor a)),
                Path (C a a (=-ctor a)) d
                     (=-elim a C d a (=-ctor a))), ùüè

def FibrationalSystem (A : U) : U‚ÇÅ ‚âî
  Œ£ (Œ†-form  : Œ† (B : A ‚Üí U), U)
    (Œ†-ctor‚ÇÅ : Œ† (B : A ‚Üí U), Pi A B ‚Üí Pi A B)
    (Œ†-elim‚ÇÅ : Œ† (B : A ‚Üí U), Pi A B ‚Üí Pi A B)
    (Œ†-comp‚ÇÅ : Œ† (B : A ‚Üí U) (a : A) (f : Pi A B), Path (B a) (Œ†-elim‚ÇÅ B (Œ†-ctor‚ÇÅ B f) a) (f a))
    (Œ†-comp‚ÇÇ : Œ† (B : A ‚Üí U) (a : A) (f : Pi A B), Path (Pi A B) f (Œª (x : A), f x))
    (Œ£-form  : Œ† (B : A ‚Üí U), U)
    (Œ£-ctor‚ÇÅ : Œ† (B : A ‚Üí U) (a : A) (b : B a) , Sigma A B)
    (Œ£-elim‚ÇÅ : Œ† (B : A ‚Üí U) (p : Sigma A B), A)
    (Œ£-elim‚ÇÇ : Œ† (B : A ‚Üí U) (p : Sigma A B), B (pr‚ÇÅ A B p))
    (Œ£-comp‚ÇÅ : Œ† (B : A ‚Üí U) (a : A) (b: B a), Path A a (Œ£-elim‚ÇÅ B (Œ£-ctor‚ÇÅ B a b)))
    (Œ£-comp‚ÇÇ : Œ† (B : A ‚Üí U) (a : A) (b: B a), Path (B a) b (Œ£-elim‚ÇÇ B (a, b)))
    (Œ£-comp‚ÇÉ : Œ† (B : A ‚Üí U) (p : Sigma A B), Path (Sigma A B) p (pr‚ÇÅ A B p, pr‚ÇÇ A B p)), ùüè

def MLTT (A : U) : U‚ÇÅ ‚âî
  Œ£ (Œ†-form  : Œ† (B : A ‚Üí U), U)
    (Œ†-ctor‚ÇÅ : Œ† (B : A ‚Üí U), Pi A B ‚Üí Pi A B)
    (Œ†-elim‚ÇÅ : Œ† (B : A ‚Üí U), Pi A B ‚Üí Pi A B)
    (Œ†-comp‚ÇÅ : Œ† (B : A ‚Üí U) (a : A) (f : Pi A B), Path (B a) (Œ†-elim‚ÇÅ B (Œ†-ctor‚ÇÅ B f) a) (f a))
    (Œ†-comp‚ÇÇ : Œ† (B : A ‚Üí U) (a : A) (f : Pi A B), Path (Pi A B) f (Œª (x : A), f x))
    (Œ£-form  : Œ† (B : A ‚Üí U), U)
    (Œ£-ctor‚ÇÅ : Œ† (B : A ‚Üí U) (a : A) (b : B a) , Sigma A B)
    (Œ£-elim‚ÇÅ : Œ† (B : A ‚Üí U) (p : Sigma A B), A)
    (Œ£-elim‚ÇÇ : Œ† (B : A ‚Üí U) (p : Sigma A B), B (pr‚ÇÅ A B p))
    (Œ£-comp‚ÇÅ : Œ† (B : A ‚Üí U) (a : A) (b: B a), Path A a (Œ£-elim‚ÇÅ B (Œ£-ctor‚ÇÅ B a b)))
    (Œ£-comp‚ÇÇ : Œ† (B : A ‚Üí U) (a : A) (b: B a), Path (B a) b (Œ£-elim‚ÇÇ B (a, b)))
    (Œ£-comp‚ÇÉ : Œ† (B : A ‚Üí U) (p : Sigma A B), Path (Sigma A B) p (pr‚ÇÅ A B p, pr‚ÇÇ A B p))
    (=-form  : Œ† (a : A), A ‚Üí U)
    (=-ctor‚ÇÅ : Œ† (a : A), Path A a a)
    (=-elim‚ÇÅ : Œ† (a : A) (C: D A) (d: C a a (=-ctor‚ÇÅ a)) (y: A) (p: Path A a y), C a y p)
    (=-comp‚ÇÅ : Œ† (a : A) (C: D A) (d: C a a (=-ctor‚ÇÅ a)), Path (C a a (=-ctor‚ÇÅ a)) d (=-elim‚ÇÅ a C d a (=-ctor‚ÇÅ a))), ùüè

--- Self-aware MLTT:
--- Theorem. Id Œ≤-rule is derivable from generalized transport

def internalizing (A : U)
  : MLTT A
 := ( Pi A, Œ†-lambda A, Œ†-apply A, Œ†-Œ≤ A, Œ†-Œ∑ A,
      Sigma A, pair A, pr‚ÇÅ A, pr‚ÇÇ A, Œ£-Œ≤‚ÇÅ A, Œ£-Œ≤‚ÇÇ A, Œ£-Œ∑ A,
      Path A, idp A, J A, J-Œ≤ A,
      ‚òÖ
    )
