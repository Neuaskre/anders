module quot where
import lib/foundations/univalent/path

--- Lean Quotient Primitive Q/~

axiom quot (α: U) (r: α → α → U) : U
axiom quot-mk (α: U) (r: α → α → U) (a: α) : quot α r
axiom quot-elim (α: U) (r: α → α → U) (C: quot α r → U) (f: Π (a: α), C (quot-mk α r a)) : Π (q : quot α r), C q
axiom quot-lift (α β: U) (r: α → α → U) (f: α → β) (m: Π (a b : α), Path β (f a) (f b)) : quot α r → β
axiom quot-comp (α β: U) (r: α → α → U) (f: α → β) (m: Π (a b : α), Path β (f a) (f b)) (a: α)
    : Path β (quot-lift α β r f m (quot-mk α r a)) (f a)

def quot-sound (α: U) (r: α → α → U) (a b : α) (m: Π (a b : α), Path α a b)
  : Path (quot α r) (quot-mk α r a) (quot-mk α r b)
 := <i> quot-mk α r ((m a b) @ i)
