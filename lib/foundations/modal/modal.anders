module modal where

def Modality :=
  Œ£ (modality: U ‚Üí U)
    (isModal : U ‚Üí U)
    (eta:      Œ† (A : U), A ‚Üí modality A)
    (elim:     Œ† (A : U) (B : modality A ‚Üí U)
                 (B-Modal : Œ† (x : modality A), isModal (B x))
                 (f: –ü (x : A), (B (eta A x))),
                 (Œ† (x : modality A), B x))
    (elim-Œ≤ :  Œ† (A : U) (B : modality A ‚Üí U)
                 (B-Modal : Œ† (x : modality A), isModal (B x))
                 (f : Œ† (x : A), (B (eta A x))) (a : A),
                 PathP (<_>B (eta A a)) (elim A B B-Modal f (eta A a)) (f a))
    (isPropIsModal   : Œ† (A : U), Œ† (a b : isModal A), PathP (<_>isModal A) a b) -- isProp
    (modalityIsModal : Œ† (A : U), isModal (modality A))
    (=-Modal         : Œ† (A : U) (x y : modality A),
                         isModal (PathP (<_>modality A) x y)), ùüè
