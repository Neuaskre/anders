{- FunExt: https://anders.groupoid.space/foundations/univalent/funext
   — Homotopy;
   — Identity System;
   — Function Extensionality;
   — FunExt as Isomorphism.

   HoTT 2.4 Homotopies and equivalence
   HoTT 2.9 Pi-types and the function extensionality axiom

   Copyright (c) Groupoid Infinity, 2014-2023. -}

module extensionality where
import lib/foundations/univalent/path
import lib/foundations/mltt/pi

--- FunExt as Isomorphism

def ~ (A B: U) (f g: A → B): U := Path (A → B) f g
def funext (A B: U) (f g: A → B) (p: Π (x: A), Path B (f x) (g x))
  : ~ A B f g := <i> λ (a: A), p a @ i
def happly (A B: U) (f g : A → B) (p: ~ A B f g) (x : A)
  : Path B (f x) (g x) := cong (A → B) B (λ (h: A → B), app A B h x) f g p
def funext-β (A B: U) (f g: A → B) (p: Π (x: A), Path B (f x) (g x))
  : Π (x: A), Path B (f x) (g x)
 := λ (x: A), happly A B f g (funext A B f g p) x
def funext-η (A B: U) (f g: A → B) (p: Path (A → B) f g)
  : Path (Path (A → B) f g) (funext A B f g (happly A B f g p)) p
 := idp (Path (A → B) f g) p

--- FunExt as Identity System

def funext-D (A B: U) := Π (f g : A → B), Path (A → B) f g → U
def funext-id (A: U) : ~ A A (id A) (id A) := <_> id A
def funext-ind (A B: U) (f g: A → B) (C: funext-D A B)
    (d: Π (f g: A → B), C f f (<_>\(x:A), f x))
    (h: Path (A → B) f g) : C f g h
 := subst (singl (A → B) f)
          (\ (z: singl (A → B) f), C f (z.1) (z.2))
          (eta (A → B) f)
          (g, h)
          (contr (A → B) f g h)
          (d f g)
def funext-ind-β (A B: U) (f g : A → B) (C : funext-D A B)
    (d: Π (f g: A → B), C f f (<_>\(x:A), f x))
  : Path (C f f (<_>f)) (d f f) (funext-ind A B f f C d (<_>f))
 := subst-comp (singl (A → B) f)
               (\ (z: singl (A → B) f), C f (z.1) (z.2))
               (eta (A → B) f)
               (d f f)

--- Dependent Function Extensionality

def piext (A: U) (B: A → U) (f g: Π (x: A), B x) (p: Π (x: A), Path (B x) (f x) (g x)) : Path (Π (y: A), B y) f g := <i> λ (a: A), (p a) @ i
def setPi (A: U) (B: A → U) (h: Π (x: A), isSet (B x)) (f g: Pi A B) (p q: Path (Pi A B) f g) : Path (Path (Pi A B) f g) p q
 := <i j> \(x: A), (h x (f x) (g x) (<i> (p @ i) x) (<i> (q @ i) x)) @ i @ j
def setFun' (X Y: U) (p: X → isSet Y) : isSet (X → Y) := setPi X (λ (x: X), Y) p
def setFun (A B : U) (sB: isSet B) : isSet (A → B) := setPi A (λ (x: A), B) (λ (x: A), sB)
def piIsContr (A: U) (B: A → U) (u: isContr A) (q: Π (x: A), isContr (B x)) : isContr (Pi A B)
 := ((\(x: A),(q x).1),(\(z: Π(x: A),B x),<i>\(a: A),(q a).2(z a)@ i))
